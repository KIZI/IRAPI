/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.janbouchner.ir.dashboard.task;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.io.StringReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
 
import javax.annotation.Resource;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;

import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;

import cz.janbouchner.ir.dashboard.domain.StatsInTime;
import cz.janbouchner.ir.dashboard.httpclient.IrHttpClient;
import cz.janbouchner.ir.dashboard.managed.IndexInfoBean;
 
public class StatsManager implements Serializable{
	
    protected final String SERVER_URL = "http://ir.lmcloud.vse.cz/solr/";
    protected final String USER_AGENT = "Mozilla/5.0";
    protected final String WEBPAGE_URL = SERVER_URL + "webpage/";
    protected final String IMAGE_URL = SERVER_URL + "image/";
    protected final String AUDIO_URL = SERVER_URL + "audio/";
    protected final String VIDEO_URL = SERVER_URL + "video/";  	
    
    private Connection connect = null;
    private Statement statement = null;
    private PreparedStatement preparedStatement = null;
    private ResultSet resultSet = null;    
    
    private DefaultHttpClient httpclient;
 
	//if resource injection is not support, you still can get it manually.
	public StatsManager(){
        IrHttpClient httpClient = new IrHttpClient();
        this.httpclient = httpClient.getHttpClientInstance();
        
	}
 
	//connect to DB and get customer list
	public List<StatsInTime> getStatsInTimeList() throws SQLException{
		List<StatsInTime> list = new ArrayList<StatsInTime>();
		
	    try {
	        // this will load the MySQL driver, each DB has its own driver
	        Class.forName("com.mysql.jdbc.Driver");
	        // setup the connection with the DB.
	        connect = DriverManager
	            .getConnection("jdbc:mysql://localhost/ltvstats?"
	                + "user=root&password=fridlik");		
		
	     // statements allow to issue SQL queries to the database
	        statement = connect.createStatement();
	        // resultSet gets the result of the SQL query
	        resultSet = statement
	            .executeQuery("select id, time, webpage, image, video, audio from ltvstats.stats order by id asc");
 
		while(resultSet.next()){
			StatsInTime cust = new StatsInTime();
 
			cust.setId(resultSet.getInt("id"));
			cust.setWebpage(resultSet.getInt("webpage"));
			cust.setImage(resultSet.getInt("image"));
			cust.setVideo(resultSet.getInt("video"));
			cust.setPodcast(resultSet.getInt("audio"));
			cust.setDate(resultSet.getString("time"));
 
			//store all data into a List
			list.add(cust);
		}
	    } catch (Exception e) {
	        e.printStackTrace();
	      } finally {
	        close();
	      }
		return list;
	    
	}

	public void saveCurrentIndexState() throws SQLException {
	    try {
	        // this will load the MySQL driver, each DB has its own driver
	        Class.forName("com.mysql.jdbc.Driver");
	        // setup the connection with the DB.
	        connect = DriverManager
	            .getConnection("jdbc:mysql://localhost/ltvstats?"
	                + "user=root&password=fridlik");	
		
		Integer webpagesCount = Integer.valueOf(getNewWebpagesCount(WEBPAGE_URL));
		Integer videoCount = Integer.valueOf(getNewMediaCount(VIDEO_URL));
		Integer imageCount = Integer.valueOf(getNewMediaCount(IMAGE_URL));
		Integer audioCount = Integer.valueOf(getNewMediaCount(AUDIO_URL));
 
		// preparedStatements can use variables and are more efficient
	      preparedStatement = connect
	          .prepareStatement("insert into ltvstats.stats (webpage, image, audio, video, time) values (?, ?, ? , ?, ?)");
	      preparedStatement.setInt(1, webpagesCount);
	      preparedStatement.setInt(2, imageCount);
	      preparedStatement.setInt(3, audioCount);
	      preparedStatement.setInt(4, videoCount);
	      preparedStatement.setString(5, getYesterdayDateString());
	      preparedStatement.executeUpdate();		

	    } catch (Exception e) {
	        e.printStackTrace();
	      } finally {
	        close();
	      }
	}
	
    private String getNewMediaCount(String url) {
        HttpGet request = new HttpGet(url + "select?q=index_time%3A[" + getYesterdayDateString() + "T00%3A01%3A59.999Z+TO+*]&wt=xml&rows=0");

        // add request header
        request.setHeader("User-Agent", USER_AGENT);
        request.setHeader("Accept",
                "application/xml;q=0.9,*/*;q=0.8");
        request.setHeader("Accept-Language", "en-US,en;q=0.5");

        try {
            HttpResponse response = httpclient.execute(request);

            System.out.println("Response Code : "
                    + response.getStatusLine().getStatusCode());

            BufferedReader rd = new BufferedReader(
                    new InputStreamReader(response.getEntity().getContent()));

            StringBuffer result = new StringBuffer();
            String line = "";
            while ((line = rd.readLine()) != null) {
                result.append(line);
            }

            System.out.println(result.toString());

            if (response.getStatusLine().getStatusCode() == 200) {
                try {
                    Document xmlResponse = loadXml(result.toString());
                    XPathFactory xPathfactory = XPathFactory.newInstance();
                    XPath xpath = xPathfactory.newXPath();
                    XPathExpression expr = xpath.compile("//result/@numFound");
                    NodeList nl = (NodeList) expr.evaluate(xmlResponse, XPathConstants.NODESET);
                    System.out.println("RESULT: " + nl.item(0).getTextContent());
                    return nl.item(0).getTextContent();
                } catch (Exception ex) {
                    Logger.getLogger(IndexInfoBean.class.getName()).log(Level.SEVERE, null, ex);
                    return null;
                }
            } else {
                return null;
            }

        } catch (IOException ex) {
            System.out.println("Exceptioon: " + ex);
        }
        return null;
    }	
	
    private String getNewWebpagesCount(String url) {
        HttpGet request = new HttpGet(url + "select?q=index_time%3A[" + getYesterdayDateString() + "T00%3A05%3A59.999Z+TO+*]&fq=-crawl_source%3AMES&wt=xml&rows=0");

        // add request header
        request.setHeader("User-Agent", USER_AGENT);
        request.setHeader("Accept",
                "application/xml;q=0.9,*/*;q=0.8");
        request.setHeader("Accept-Language", "en-US,en;q=0.5");

        try {
            HttpResponse response = httpclient.execute(request);

            System.out.println("Response Code : "
                    + response.getStatusLine().getStatusCode());

            BufferedReader rd = new BufferedReader(
                    new InputStreamReader(response.getEntity().getContent()));

            StringBuffer result = new StringBuffer();
            String line = "";
            while ((line = rd.readLine()) != null) {
                result.append(line);
            }

            System.out.println(result.toString());

            if (response.getStatusLine().getStatusCode() == 200) {
                try {
                    Document xmlResponse = loadXml(result.toString());
                    XPathFactory xPathfactory = XPathFactory.newInstance();
                    XPath xpath = xPathfactory.newXPath();
                    XPathExpression expr = xpath.compile("//result/@numFound");
                    NodeList nl = (NodeList) expr.evaluate(xmlResponse, XPathConstants.NODESET);
                    System.out.println("RESULT: " + nl.item(0).getTextContent());
                    return nl.item(0).getTextContent();
                } catch (Exception ex) {
                    Logger.getLogger(IndexInfoBean.class.getName()).log(Level.SEVERE, null, ex);
                    return null;
                }
            } else {
                return null;
            }

        } catch (IOException ex) {
            System.out.println("Exceptioon: " + ex);
        }
        return null;
    }
    
    private String getYesterdayDateString() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);    
        return dateFormat.format(cal.getTime());
}    
    
    private Date getYesterdayDateDate() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);    
        return cal.getTime();
}      
    
    // you need to close all three to make sure
    private void close() {
      closeRs(resultSet);
      closeStm(statement);
      closeConn(connect);
    }
    
    private void closeRs(ResultSet c) {
      try {
        if (c != null) {
          c.close();
        }
      } catch (Exception e) {
      // don't throw now as it might leave following closables in undefined state
      }
    }
    
    private void closeStm(Statement c) {
        try {
          if (c != null) {
            c.close();
          }
        } catch (Exception e) {
        // don't throw now as it might leave following closables in undefined state
        }
      } 
    
    private void closeConn(Connection c) {
        try {
          if (c != null) {
            c.close();
          }
        } catch (Exception e) {
        // don't throw now as it might leave following closables in undefined state
        }
      }    
    
    protected Document loadXml(String xml) throws Exception {
        DocumentBuilderFactory fctr = DocumentBuilderFactory.newInstance();
        DocumentBuilder bldr = fctr.newDocumentBuilder();
        InputSource insrc = new InputSource(new StringReader(xml));
        return bldr.parse(insrc);
    }  
}