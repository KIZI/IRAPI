/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.janbouchner.ir.dashboard.statistics;

import cz.janbouchner.ir.dashboard.crate.ResultCrate;
import cz.janbouchner.ir.dashboard.crate.WatchedItem;
import cz.janbouchner.ir.dashboard.domain.Domain;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author jan
 */
public class LinkedTvStatistic {

    static final String[] mediaTypes = {"video", "podcast", "image", "webpage"};
    private static final String IR_SERVER = "http://ir.lmcloud.vse.cz";
    
    /*
    public void getStatistics(List<String> whitelistDomains, String whitelist) {
        List<ResultCrate> results = generatePreparedResults(IR_SERVER, whitelist);
        for (ResultCrate result : results) {
            //totals
            try {
                String currentDomain = "";
                String previousDomain = "";
                MediaStats mediaStats = new MediaStats();
                for (WatchedItem watchedItem : result.getWatchedItems()) {
                    currentDomain = watchedItem.getDomain();
                    int count = statistics.getContextCount(result.getServer(), watchedItem.getDomain(), watchedItem.getContext());
                    watchedItem.setCount(count);
                    switch (watchedItem.getContext()) {
                        case "video":
                            mediaStats.setVideos(Long.valueOf(count + ""));
                        case "podcast":
                            mediaStats.setPodcasts(Long.valueOf(count + ""));
                        case "image":
                            mediaStats.setImages(Long.valueOf(count + ""));
                        case "webpage":
                            mediaStats.setPages(Long.valueOf(count + ""));
                    }
                    if ((!currentDomain.equals(previousDomain)) && (!previousDomain.equals(""))) {
                        dashboardDAO.createStats(dateTask, singleServer, dashboardDAO.findDomainByUrl(watchedItem.getDomain()), mediaStats);
                        previousDomain = currentDomain;
                        mediaStats = new MediaStats();
                    } else {
                        previousDomain = currentDomain;
                        continue;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
	public void fillStatistic(ResultCrate res) throws IOException {
		//specified domains
		for (WatchedItem watchedItem : res.getWatchedItems()) {
			int count = getContextCount(res.getServer(), watchedItem.getDomain(), watchedItem.getContext());
			watchedItem.setCount(count);
		}
		//totals
		for (String mediaType : mediaTypes) {
			int total = getMediaTypeTotals(res.getServer(), mediaType);
			res.addTotal(mediaType, total);
		}
	}
        
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//QUERY METHODS ----------------------------------------------------------------
	////////////////////////////////////////////////////////////////////////////////////////////////////

	public int getMediaTypeTotals(String server, String mediaType) throws IOException {
		return getQueryCount(server, "media_type:\"" + mediaType + "\"");

	}        
        
	public int getContextCount(String server, String domain, String context) throws IOException {
		if (context.equals("total")) {
			String query = "url%3A\"*" + domain + "*\"";
			return getQueryCount(server, query);
		}
		String query = "media_type:" + context + "+AND+url%3A\"*" + domain + "*\"";
		return getQueryCount(server, query);
	}

	private int getQueryCount(String server, String query) throws IOException {
		if (!server.startsWith("http://")) {
			server = "http://" + server;
		}
		System.out.println("query: " + server + "/solr/collection1/select?q=" + query);
		URL url = new URL(server + "/solr/collection1/select?q=" + query);
		BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream(), "UTF-8"));
		for (String line; (line = reader.readLine()) != null;) {
			if (line.contains("numFound")) {
				Pattern p = Pattern.compile("numFound=\"[0-9]*");
				Matcher m = p.matcher(line);
				if (m.find()) {
					String sub = m.group(0);
					Pattern p2 = Pattern.compile("\\d+");
					Matcher m2 = p2.matcher(sub);
					if (m2.find()) {
						return Integer.parseInt(m2.group(0));
					}
				}
			}
		}
		reader.close();
		return 0;
	}        
    
	////////////////////////////////////////////////////////////////////////////////////////////////////
	//PREPARE STRUCTURED RESULT METHODS ----------------------------------------------------------------
	////////////////////////////////////////////////////////////////////////////////////////////////////
	private List<ResultCrate> generatePreparedResults(String server, String whitelist) {
		List<ResultCrate> results = new ArrayList<ResultCrate>();
		List<Domain> domains = getDomainsOfWhitelist(whitelist);
                List<WatchedItem> watchedItems = generateWatchedItems(domains);
		results.add(new ResultCrate(server, whitelist, watchedItems));
		return results;
	} 
        
	private List<Domain> getDomainsOfWhitelist(String whitelist) {
		switch (whitelist) {
		case "rbb":
			return getAllRbbDomains(whitelist);
		case "sv":
			return getAllSvDomains(whitelist);
		}
		return null;
	}
        
	private List<Domain> getAllSvDomains(String whitelist) {
		return dashboardDAO.getAllSvDomains(whitelist);
	}

	private List<Domain> getAllRbbDomains(String whitelist) {
		return dashboardDAO.getAllRbbDomains(whitelist);
	}
        
	private List<WatchedItem> generateWatchedItems(List<Domain> domains) {
		List<WatchedItem> items = new ArrayList<WatchedItem>();
		for (Domain domain : domains) {
			items.add(new WatchedItem(domain.getUrl(), "webpage"));
			items.add(new WatchedItem(domain.getUrl(), "video"));
			items.add(new WatchedItem(domain.getUrl(), "image"));
			items.add(new WatchedItem(domain.getUrl(), "podcast"));
		}
		return items;
	}        
        */
}
