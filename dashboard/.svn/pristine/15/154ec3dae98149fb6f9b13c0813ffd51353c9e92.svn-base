/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package cz.janbouchner.ir.dashboard.managed;

import static cz.janbouchner.ir.dashboard.managed.AbstractBean.CONF_PATH;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Serializable;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

/**
 *
 * @author jan
 */
@ManagedBean(name = "build")
@SessionScoped
public class BuildBean extends AbstractBean implements Serializable {

	private static final long serialVersionUID = 178676567869L;
    private String error;
    private String success;	

	public String buildNutch() {
        String s = null;
        error=null;
        success= null;
        try {
             
        // run the Unix "ps -ef" command
            // using the Runtime exec method:
            //Process p = Runtime.getRuntime().exec("echo hadoop | sudo -S su hadoop ; /opt/pokus/nutch/java_exec.sh > /opt/hadoop/javalog/log.txt");
        	//Process p = Runtime.getRuntime().exec("/opt/pokus/nutch/java_exec.sh > /opt/hadoop/javalog/log.txt");
        	Process p = Runtime.getRuntime().exec("/opt/pokus/nutch/java_exec.sh");
            
            BufferedReader stdInput = new BufferedReader(new
                 InputStreamReader(p.getInputStream()));
 
            BufferedReader stdError = new BufferedReader(new
                 InputStreamReader(p.getErrorStream()));
 
            // read the output from the command
            System.out.println("Here is the standard output of the command:\n");
            while ((s = stdInput.readLine()) != null) {
                System.out.println(s);
            }
             
            // read any errors from the attempted command
            System.out.println("Here is the standard error of the command (if any):\n");
            while ((s = stdError.readLine()) != null) {
                System.out.println(s);
                error = s;
            }
             
            System.exit(0);
        }
        catch (IOException e) {
            System.out.println("exception happened - here's what I know: ");
            e.printStackTrace();
            error = e.getMessage();
            System.exit(-1);
        }
        
        success = "OK";
		return "index?faces-redirect=true";
	}

	public String getError() {
		return error;
	}

	public void setError(String error) {
		this.error = error;
	}

	public String getSuccess() {
		return success;
	}

	public void setSuccess(String success) {
		this.success = success;
	}
	
	
}
